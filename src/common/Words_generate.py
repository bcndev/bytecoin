# Copyright (c) 2012-2018, The CryptoNote developers, The Bytecoin developers.
# Licensed under the GNU Lesser General Public License. See LICENSE for details.

from itertools import accumulate
from re import fullmatch
from sys import argv
from zlib import crc32

# When changing the script, run and commit artefacts

input = "words_english.txt"
output1 = "Words.hpp"
output2 = "Words.cpp"

with open(input, 'r', encoding='ASCII', newline='') as fd:
    data = fd.read()

words = list(filter(None, data.split('\n')))
if not words or not all(fullmatch('[a-z]+', word) for word in words) or len(set(words)) != len(words):
    raise ValueError('Bad word list')

raw_words = words.copy()
raw_words.sort()

words.sort(key=lambda word: (len(word), word))
minlen, maxlen = len(words[0]), len(words[-1])

with open(output1, 'w', encoding='ASCII', newline='') as fd:
    fd.write(
f'''// This file is generated by Words_generate.py.

#pragma once

#include <cstddef>
#include <cstdint>

namespace common {{

extern const char *const word_ptrs[];
extern const uint32_t word_crc32_adj[];
extern const uint32_t *const words_bylen[];
extern const char *raw_words[];

enum {{
\tWORDS_COUNT = {len(words)},
\tWORDS_MIN_LEN = {minlen},
\tWORDS_MAX_LEN = {maxlen},
\tBITS_PER_WORD = {len(words).bit_length() - 1}
}};

}}''')

with open(output2, 'w', encoding='ASCII', newline='') as fd:
    fd.write(
f'''// This file is generated by Words_generate.py.
#include <cstddef>
#include <cstdint>

#include "Words.hpp"

namespace common {{

static const char word_chars[] = "{''.join(words)}";
const char *const word_ptrs[] = {{word_chars{''.join(f', word_chars + {i}' for i in accumulate(map(len, words)))}}};
const uint32_t word_crc32_adj[] = {{{', '.join(f'{crc32(word.encode("ASCII"), 0xffffffff) ^ 0xffffffff}' for word in words)}}};
const uint32_t *const words_bylen[] = {{{', '.join(f'word_crc32_adj + {next((j for j in range(len(words)) if len(words[j]) >= i), len(words))}' for i in range(minlen + 1, maxlen + 2))}}};
const char * raw_words[] = {{{', '.join(f'"{word}"' for word in raw_words)}}};

}}''')